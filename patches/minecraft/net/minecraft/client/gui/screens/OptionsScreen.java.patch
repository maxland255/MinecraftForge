--- a/net/minecraft/client/gui/screens/OptionsScreen.java
+++ b/net/minecraft/client/gui/screens/OptionsScreen.java
@@ -52,8 +_,8 @@
       GridLayout gridlayout = new GridLayout();
       gridlayout.defaultCellSetting().paddingHorizontal(5).paddingBottom(4).alignHorizontallyCenter();
       GridLayout.RowHelper gridlayout$rowhelper = gridlayout.createRowHelper(2);
-      gridlayout$rowhelper.addChild(this.options.fov().createButton(this.minecraft.options, 0, 0, 150));
-      gridlayout$rowhelper.addChild(this.createOnlineButton());
+      gridlayout$rowhelper.addChild(this.options.fov().createButton(this.minecraft.options, 0, 0, 300), 2);
+//      gridlayout$rowhelper.addChild(this.createOnlineButton());
       gridlayout$rowhelper.addChild(SpacerElement.height(26), 2);
       gridlayout$rowhelper.addChild(this.openScreenButton(SKIN_CUSTOMIZATION, () -> {
          return new SkinCustomizationScreen(this, this.options);
@@ -98,48 +_,48 @@
       this.minecraft.setScreen(this);
    }
 
-   private LayoutElement createOnlineButton() {
-      if (this.minecraft.level != null && this.minecraft.hasSingleplayerServer()) {
-         this.difficultyButton = createDifficultyButton(0, 0, "options.difficulty", this.minecraft);
-         if (!this.minecraft.level.getLevelData().isHardcore()) {
-            this.lockButton = new LockIconButton(0, 0, (p_280806_) -> {
-               this.minecraft.setScreen(new ConfirmScreen(this::lockCallback, Component.translatable("difficulty.lock.title"), Component.translatable("difficulty.lock.question", this.minecraft.level.getLevelData().getDifficulty().getDisplayName())));
-            });
-            this.difficultyButton.setWidth(this.difficultyButton.getWidth() - this.lockButton.getWidth());
-            this.lockButton.setLocked(this.minecraft.level.getLevelData().isDifficultyLocked());
-            this.lockButton.active = !this.lockButton.isLocked();
-            this.difficultyButton.active = !this.lockButton.isLocked();
-            EqualSpacingLayout equalspacinglayout = new EqualSpacingLayout(150, 0, EqualSpacingLayout.Orientation.HORIZONTAL);
-            equalspacinglayout.addChild(this.difficultyButton);
-            equalspacinglayout.addChild(this.lockButton);
-            return equalspacinglayout;
-         } else {
-            this.difficultyButton.active = false;
-            return this.difficultyButton;
-         }
-      } else {
-         return Button.builder(Component.translatable("options.online"), (p_280805_) -> {
-            this.minecraft.setScreen(OnlineOptionsScreen.createOnlineOptionsScreen(this.minecraft, this, this.options));
-         }).bounds(this.width / 2 + 5, this.height / 6 - 12 + 24, 150, 20).build();
-      }
-   }
-
-   public static CycleButton<Difficulty> createDifficultyButton(int p_262051_, int p_261805_, String p_261598_, Minecraft p_261922_) {
-      return CycleButton.builder(Difficulty::getDisplayName).withValues(Difficulty.values()).withInitialValue(p_261922_.level.getDifficulty()).create(p_262051_, p_261805_, 150, 20, Component.translatable(p_261598_), (p_296186_, p_296187_) -> {
-         p_261922_.getConnection().send(new ServerboundChangeDifficultyPacket(p_296187_));
-      });
-   }
-
-   private void lockCallback(boolean p_96261_) {
-      this.minecraft.setScreen(this);
-      if (p_96261_ && this.minecraft.level != null) {
-         this.minecraft.getConnection().send(new ServerboundLockDifficultyPacket(true));
-         this.lockButton.setLocked(true);
-         this.lockButton.active = false;
-         this.difficultyButton.active = false;
-      }
-
-   }
+//   private LayoutElement createOnlineButton() {
+//      if (this.minecraft.level != null && this.minecraft.hasSingleplayerServer()) {
+//         this.difficultyButton = createDifficultyButton(0, 0, "options.difficulty", this.minecraft);
+//         if (!this.minecraft.level.getLevelData().isHardcore()) {
+//            this.lockButton = new LockIconButton(0, 0, (p_280806_) -> {
+//               this.minecraft.setScreen(new ConfirmScreen(this::lockCallback, Component.translatable("difficulty.lock.title"), Component.translatable("difficulty.lock.question", this.minecraft.level.getLevelData().getDifficulty().getDisplayName())));
+//            });
+//            this.difficultyButton.setWidth(this.difficultyButton.getWidth() - this.lockButton.getWidth());
+//            this.lockButton.setLocked(this.minecraft.level.getLevelData().isDifficultyLocked());
+//            this.lockButton.active = !this.lockButton.isLocked();
+//            this.difficultyButton.active = !this.lockButton.isLocked();
+//            EqualSpacingLayout equalspacinglayout = new EqualSpacingLayout(150, 0, EqualSpacingLayout.Orientation.HORIZONTAL);
+//            equalspacinglayout.addChild(this.difficultyButton);
+//            equalspacinglayout.addChild(this.lockButton);
+//            return equalspacinglayout;
+//         } else {
+//            this.difficultyButton.active = false;
+//            return this.difficultyButton;
+//         }
+//      } else {
+//         return Button.builder(Component.translatable("options.online"), (p_280805_) -> {
+//            this.minecraft.setScreen(OnlineOptionsScreen.createOnlineOptionsScreen(this.minecraft, this, this.options));
+//         }).bounds(this.width / 2 + 5, this.height / 6 - 12 + 24, 150, 20).build();
+//      }
+//   }
+
+//   public static CycleButton<Difficulty> createDifficultyButton(int p_262051_, int p_261805_, String p_261598_, Minecraft p_261922_) {
+//      return CycleButton.builder(Difficulty::getDisplayName).withValues(Difficulty.values()).withInitialValue(p_261922_.level.getDifficulty()).create(p_262051_, p_261805_, 150, 20, Component.translatable(p_261598_), (p_296186_, p_296187_) -> {
+//         p_261922_.getConnection().send(new ServerboundChangeDifficultyPacket(p_296187_));
+//      });
+//   }
+
+//   private void lockCallback(boolean p_96261_) {
+//      this.minecraft.setScreen(this);
+//      if (p_96261_ && this.minecraft.level != null) {
+//         this.minecraft.getConnection().send(new ServerboundLockDifficultyPacket(true));
+//         this.lockButton.setLocked(true);
+//         this.lockButton.active = false;
+//         this.difficultyButton.active = false;
+//      }
+//
+//   }
 
    public void removed() {
       this.options.save();
@@ -149,6 +_,14 @@
       super.render(p_283520_, p_281826_, p_283378_, p_281975_);
       p_283520_.drawCenteredString(this.font, this.title, this.width / 2, 15, 16777215);
    }
+
+    @Override
+    public void onClose() {
+        // We need to consider 2 potential parent screens here:
+        // 1. From the main menu, in which case display the main menu
+        // 2. From the pause menu, in which case exit back to game
+        this.minecraft.setScreen(this.lastScreen instanceof PauseScreen ? null : this.lastScreen);
+    }
 
    private Button openScreenButton(Component p_261565_, Supplier<Screen> p_262119_) {
       return Button.builder(p_261565_, (p_280808_) -> {
